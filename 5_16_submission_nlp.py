# -*- coding: utf-8 -*-
"""5_16 Submission NLP

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f92IBdeU39NTEIOnQpYOWne9NjM6YAJN
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df = pd.read_csv('/content/drive/My Drive/MLDevelopers/Submission_1/Question_Classification_Dataset.csv')
df

df = df.drop(columns=['Unnamed: 0','Category1','Category2'])
df

#proses one hot encoding
category = pd.get_dummies(df.Category0)
df_baru = pd.concat([df,category],axis=1)
df_baru = df_baru.drop(columns='Category0')
df_baru

#mengubah nilai dari dataframe ke tipe data numpy array
quest = df_baru['Questions'].values
label = df_baru[['ABBREVIATION','DESCRIPTION','ENTITY','HUMAN','LOCATION','NUMERIC']].values

#membagi data untuk training dan testing
from sklearn.model_selection import train_test_split
quest_latih, quest_test, label_latih, label_test = train_test_split(quest, label, test_size=0.2)

#melakukan tokenisasi
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(quest_latih)
tokenizer.fit_on_texts(quest_test)

sekuens_latih = tokenizer.texts_to_sequences(quest_latih)
sekuens_test = tokenizer.texts_to_sequences(quest_test)
 
padded_latih = pad_sequences(sekuens_latih) 
padded_test = pad_sequences(sekuens_test)

#arsitektur model layer embedding dengan dimensi 16
import tensorflow as tf
model = tf.keras.Sequential([
        tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
        tf.keras.layers.LSTM(64),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dense(64, activation='relu'),
        tf.keras.layers.Dense(6, activation='softmax')])
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

#membuat kelas callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('val_accuracy')>0.9):
      print("\nAkurasi telah mencapai >90%!")
      self.model.stop_training = True
callbacks = myCallback()

#melatih model
num_epochs = 30
history = model.fit(padded_latih, 
                    label_latih, 
                    epochs=num_epochs,
                    validation_data=(padded_test,label_test), 
                    verbose=2,
                    callbacks=[callbacks])